// Mocks generated by Mockito 5.0.17 from annotations
// in imploop/test/page/task_list/task/task_edit_modal_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:imploop/domain/task_type.dart' as _i4;
import 'package:imploop/service/task_type_service.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [TaskTypeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskTypeService extends _i1.Mock implements _i2.TaskTypeService {
  MockTaskTypeService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> hasAlreadyRegistered(String? name) =>
      (super.noSuchMethod(Invocation.method(#hasAlreadyRegistered, [name]),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<_i4.TaskType?> add(String? name) => (super.noSuchMethod(
      Invocation.method(#add, [name]),
      returnValue: Future<_i4.TaskType?>.value()) as _i3.Future<_i4.TaskType?>);
  @override
  _i3.Future<List<_i4.TaskType>> fetchRegisteredTaskTypeList() =>
      (super.noSuchMethod(Invocation.method(#fetchRegisteredTaskTypeList, []),
              returnValue: Future<List<_i4.TaskType>>.value(<_i4.TaskType>[]))
          as _i3.Future<List<_i4.TaskType>>);
  @override
  _i3.Future<bool> existsTaskType(int? taskTypeId) =>
      (super.noSuchMethod(Invocation.method(#existsTaskType, [taskTypeId]),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<_i4.TaskType?> get(int? taskTypeId) => (super.noSuchMethod(
      Invocation.method(#get, [taskTypeId]),
      returnValue: Future<_i4.TaskType?>.value()) as _i3.Future<_i4.TaskType?>);
  @override
  _i3.Future<_i4.TaskType?> getByTypeName(String? taskTypeName) =>
      (super.noSuchMethod(Invocation.method(#getByTypeName, [taskTypeName]),
              returnValue: Future<_i4.TaskType?>.value())
          as _i3.Future<_i4.TaskType?>);
}
