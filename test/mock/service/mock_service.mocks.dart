// Mocks generated by Mockito 5.0.17 from annotations
// in imploop/test/mock/service/mock_service.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:imploop/domain/task.dart' as _i5;
import 'package:imploop/domain/task_type.dart' as _i6;
import 'package:imploop/domain/todo.dart' as _i7;
import 'package:imploop/domain/todo_type.dart' as _i12;
import 'package:imploop/service/task_notice_service.dart' as _i2;
import 'package:imploop/service/task_service.dart' as _i3;
import 'package:imploop/service/task_type_service.dart' as _i8;
import 'package:imploop/service/todo_notice_service.dart' as _i9;
import 'package:imploop/service/todo_service.dart' as _i10;
import 'package:imploop/service/todo_type_service.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [TaskNoticeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskNoticeService extends _i1.Mock implements _i2.TaskNoticeService {
  MockTaskNoticeService() {
    _i1.throwOnMissingStub(this);
  }
}

/// A class which mocks [TaskService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskService extends _i1.Mock implements _i3.TaskService {
  MockTaskService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i5.Task?> registerNewTask(String? name, _i6.TaskType? taskType) =>
      (super.noSuchMethod(Invocation.method(#registerNewTask, [name, taskType]),
          returnValue: Future<_i5.Task?>.value()) as _i4.Future<_i5.Task?>);
  @override
  _i4.Future<List<_i5.Task>> getAllTask() =>
      (super.noSuchMethod(Invocation.method(#getAllTask, []),
              returnValue: Future<List<_i5.Task>>.value(<_i5.Task>[]))
          as _i4.Future<List<_i5.Task>>);
  @override
  _i4.Future<List<_i5.Task>> getAllTaskWithoutFinished() =>
      (super.noSuchMethod(Invocation.method(#getAllTaskWithoutFinished, []),
              returnValue: Future<List<_i5.Task>>.value(<_i5.Task>[]))
          as _i4.Future<List<_i5.Task>>);
  @override
  _i4.Future<_i5.Task?> get(int? taskId) =>
      (super.noSuchMethod(Invocation.method(#get, [taskId]),
          returnValue: Future<_i5.Task?>.value()) as _i4.Future<_i5.Task?>);
  @override
  _i4.Future<List<_i7.Todo>> getAllTodoInTask(int? taskId) =>
      (super.noSuchMethod(Invocation.method(#getAllTodoInTask, [taskId]),
              returnValue: Future<List<_i7.Todo>>.value(<_i7.Todo>[]))
          as _i4.Future<List<_i7.Todo>>);
  @override
  _i4.Future<List<_i7.Todo>> getAllTodoWithoutFinishedInTask(int? taskId) =>
      (super.noSuchMethod(
              Invocation.method(#getAllTodoWithoutFinishedInTask, [taskId]),
              returnValue: Future<List<_i7.Todo>>.value(<_i7.Todo>[]))
          as _i4.Future<List<_i7.Todo>>);
  @override
  _i4.Future<bool> editTask(_i5.Task? updatedTask) =>
      (super.noSuchMethod(Invocation.method(#editTask, [updatedTask]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<bool> deleteTask(_i5.Task? deletedTask) =>
      (super.noSuchMethod(Invocation.method(#deleteTask, [deletedTask]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<bool> containsNonFinishedTodo(int? taskId) =>
      (super.noSuchMethod(Invocation.method(#containsNonFinishedTodo, [taskId]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<bool> existsTask(_i5.Task? task) =>
      (super.noSuchMethod(Invocation.method(#existsTask, [task]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<bool> finishTask(_i5.Task? finishedTask) =>
      (super.noSuchMethod(Invocation.method(#finishTask, [finishedTask]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<Map<String, int>> getTodoStatusList(_i5.Task? task) =>
      (super.noSuchMethod(Invocation.method(#getTodoStatusList, [task]),
              returnValue: Future<Map<String, int>>.value(<String, int>{}))
          as _i4.Future<Map<String, int>>);
}

/// A class which mocks [TaskTypeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskTypeService extends _i1.Mock implements _i8.TaskTypeService {
  MockTaskTypeService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> hasAlreadyRegistered(String? name) =>
      (super.noSuchMethod(Invocation.method(#hasAlreadyRegistered, [name]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<_i6.TaskType?> add(String? name) => (super.noSuchMethod(
      Invocation.method(#add, [name]),
      returnValue: Future<_i6.TaskType?>.value()) as _i4.Future<_i6.TaskType?>);
  @override
  _i4.Future<List<_i6.TaskType>> fetchRegisteredTaskTypeList() =>
      (super.noSuchMethod(Invocation.method(#fetchRegisteredTaskTypeList, []),
              returnValue: Future<List<_i6.TaskType>>.value(<_i6.TaskType>[]))
          as _i4.Future<List<_i6.TaskType>>);
  @override
  _i4.Future<bool> existsTaskType(int? taskTypeId) =>
      (super.noSuchMethod(Invocation.method(#existsTaskType, [taskTypeId]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<_i6.TaskType?> get(int? taskTypeId) => (super.noSuchMethod(
      Invocation.method(#get, [taskTypeId]),
      returnValue: Future<_i6.TaskType?>.value()) as _i4.Future<_i6.TaskType?>);
  @override
  _i4.Future<_i6.TaskType?> getByTypeName(String? taskTypeName) =>
      (super.noSuchMethod(Invocation.method(#getByTypeName, [taskTypeName]),
              returnValue: Future<_i6.TaskType?>.value())
          as _i4.Future<_i6.TaskType?>);
}

/// A class which mocks [TodoNoticeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoNoticeService extends _i1.Mock implements _i9.TodoNoticeService {
  MockTodoNoticeService() {
    _i1.throwOnMissingStub(this);
  }
}

/// A class which mocks [TodoService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoService extends _i1.Mock implements _i10.TodoService {
  MockTodoService() {
    _i1.throwOnMissingStub(this);
  }
}

/// A class which mocks [TodoTypeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoTypeService extends _i1.Mock implements _i11.TodoTypeService {
  MockTodoTypeService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> hasAlreadyRegistered(String? name) =>
      (super.noSuchMethod(Invocation.method(#hasAlreadyRegistered, [name]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<_i12.TodoType?> add(String? name) =>
      (super.noSuchMethod(Invocation.method(#add, [name]),
              returnValue: Future<_i12.TodoType?>.value())
          as _i4.Future<_i12.TodoType?>);
  @override
  _i4.Future<List<_i12.TodoType>> fetchRegisteredTodoTypeList() =>
      (super.noSuchMethod(Invocation.method(#fetchRegisteredTodoTypeList, []),
              returnValue: Future<List<_i12.TodoType>>.value(<_i12.TodoType>[]))
          as _i4.Future<List<_i12.TodoType>>);
  @override
  _i4.Future<bool> existsTodoType(int? todoTypeId) =>
      (super.noSuchMethod(Invocation.method(#existsTodoType, [todoTypeId]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<_i12.TodoType?> get(int? todoTypeId) =>
      (super.noSuchMethod(Invocation.method(#get, [todoTypeId]),
              returnValue: Future<_i12.TodoType?>.value())
          as _i4.Future<_i12.TodoType?>);
  @override
  _i4.Future<_i12.TodoType?> getByTypeName(String? todoTypeName) =>
      (super.noSuchMethod(Invocation.method(#getByTypeName, [todoTypeName]),
              returnValue: Future<_i12.TodoType?>.value())
          as _i4.Future<_i12.TodoType?>);
}
